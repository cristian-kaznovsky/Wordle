{"mappings":"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","sources":["Wordle/src/index.js"],"sourcesContent":["const word_url = \"https://words.dev-apis.com/word-of-the-day?random=1\";\r\nconst check_url = \"https://words.dev-apis.com/validate-word\";\r\nlet letter_index = 1;\r\nlet row_index = 1;\r\nlet my_word = \"\";\r\nlet row_pos = document.querySelector(\r\n  `.puzzle-container .puzzle-row:nth-child(${row_index})`\r\n);\r\nlet letter_pos = row_pos.querySelector(\r\n  `.puzzle-row :nth-child(${letter_index})`\r\n);\r\n\r\nconst loader = document.querySelector(`.loader`);\r\nconst ANSWER_LENGTH = 5;\r\nlet message = document.querySelector(`.message`);\r\nlet sticky = false;\r\nlet lives = 6;\r\nlet done = false;\r\nlet wordApi;\r\nlet wordJson;\r\nlet secretWord;\r\nconst goodDict = {};\r\n\r\nasync function init() {\r\n  wordApi = await fetch(word_url);\r\n  wordJson = await wordApi.json();\r\n  secretWord = wordJson.word;\r\n  //console.log(secretWord, wordJson.puzzleNumber);\r\n  for (let row = 1; row <= 3; row++) {\r\n    let keyContainer = document.querySelector(\r\n      `.hg-rows .hg-row:nth-child(${row})`\r\n    );\r\n    for (let i = 0; i < keyContainer.children.length; i++) {\r\n      let letterKey = keyContainer.children[i].textContent;\r\n      if (letterKey.length == 1 && isLetter(letterKey))\r\n        goodDict[letterKey] = keyContainer.children[i];\r\n    }\r\n  }\r\n}\r\n\r\ninit();\r\n\r\nfunction insertLetter(event) {\r\n  if (done === false) {\r\n    if (isLetter(event.key) && letter_index <= 5 && sticky == false) {\r\n      letter_pos.value = event.key.toUpperCase();\r\n      letter_pos.style.color = \"black\";\r\n      letter_index += 1;\r\n      updateLetter(letter_index);\r\n      my_word += event.key.toUpperCase();\r\n    } else if (\r\n      event.key === \"Enter\" &&\r\n      letter_index == 6 &&\r\n      sticky == false &&\r\n      row_index < 7\r\n    ) {\r\n      sticky = true;\r\n      loadSpinner(true);\r\n      checkWord(my_word);\r\n    } else if (event.key === \"Backspace\" && letter_index > 1) {\r\n      my_word = my_word.slice(0, my_word.length - 1);\r\n      letter_index -= 1;\r\n      updateLetter(letter_index);\r\n      letter_pos.style.color = \"white\";\r\n    }\r\n  }\r\n}\r\n\r\nasync function checkWord(typedWord) {\r\n  typedWord = typedWord.toLowerCase();\r\n  const data = { word: typedWord };\r\n  //console.log(JSON.stringify(data));\r\n  const valid = await fetch(check_url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n  });\r\n  const processedResponse = await valid.json();\r\n  wordFeedback(processedResponse.validWord, typedWord);\r\n}\r\n\r\nfunction loadSpinner(status) {\r\n  if (status === true) {\r\n    loader.classList.remove(\"loader-hidden\");\r\n  } else {\r\n    loader.classList.add(\"loader-hidden\");\r\n  }\r\n}\r\n\r\nasync function wordFeedback(validation, typedWord) {\r\n  //console.log(secretWord, wordJson.puzzleNumber);\r\n  const yellowColor=\"rgb(247, 198, 82)\";\r\n  const greenColor=\"rgb(83, 141, 78)\";\r\n  const greyColor=\"rgb(136, 136, 136)\";\r\n  if (validation === false) {\r\n    changeBorder(false);\r\n  } else if (validation === true) {\r\n    if (typedWord === secretWord) {\r\n      message.textContent = \"You Win!\";\r\n      message.style.color = \"#00a648\";\r\n      done = true;\r\n    } else if (lives == row_index) {\r\n      message.style.color = \"red\";\r\n      message.textContent = `You Lose. The word was \"${secretWord}\"`;\r\n      done = true;\r\n    }\r\n    let letterDict = {};\r\n    for (let pos = 0; pos < ANSWER_LENGTH; pos++) {\r\n      const letter = typedWord[pos];\r\n      const guessLetter = secretWord[pos];\r\n      if (letterDict[guessLetter]) {\r\n        letterDict[guessLetter]++;\r\n      } else {\r\n        letterDict[guessLetter] = 1;\r\n      }\r\n      if (letter === guessLetter) {\r\n        letterFeedback(pos + 1, greenColor);\r\n        goodDict[letter.toUpperCase()].style.backgroundColor = greenColor;\r\n        letterDict[letter]--;\r\n      } else {\r\n        letterFeedback(pos + 1, greyColor);\r\n        if (goodDict[letter.toUpperCase()].style.backgroundColor != greenColor && goodDict[letter.toUpperCase()].style.backgroundColor != yellowColor){\r\n          goodDict[letter.toUpperCase()].style.backgroundColor = greyColor;\r\n        } \r\n      }\r\n    }\r\n    for (let pos = 0; pos < ANSWER_LENGTH; pos++) {\r\n      const letter = typedWord[pos];\r\n      const guessLetter = secretWord[pos];\r\n      if (\r\n        secretWord.includes(letter) &&\r\n        letterDict[letter] > 0 &&\r\n        letter !== guessLetter\r\n      ) {\r\n        letterFeedback(pos + 1, yellowColor);\r\n        if (goodDict[letter.toUpperCase()].style.backgroundColor !== greenColor){\r\n          goodDict[letter.toUpperCase()].style.backgroundColor = yellowColor;\r\n        }\r\n        letterDict[letter]--;\r\n      }\r\n    }\r\n    makeReadOnly();\r\n    goNext();\r\n    my_word = \"\";\r\n  }\r\n  sticky = false;\r\n}\r\n\r\nfunction changeBorder(validation) {\r\n  if (validation === false) {\r\n    my_word = \"\";\r\n    for (let i = 1; i < 6; i++) {\r\n      updateLetter(i);\r\n      letter_pos.style.borderColor = \"red\";\r\n    }\r\n    setTimeout(() => {\r\n      for (let i = 5; i >= 1; i--) {\r\n        updateLetter(i);\r\n        letter_pos.style.borderColor = \"lightgrey\";\r\n        letter_pos.style.color = \"white\";\r\n      }\r\n    }, 1000);\r\n    letter_index = 1;\r\n    updateLetter(letter_index);\r\n  }\r\n  loadSpinner(false);\r\n}\r\nfunction isLetter(letter) {\r\n  return /^[a-zA-Z]$/.test(letter);\r\n}\r\nfunction updateBoth(rowIndex, letterIndex) {\r\n  row_pos = document.querySelector(\r\n    `.puzzle-container .puzzle-row:nth-child(${rowIndex})`\r\n  );\r\n  letter_pos = row_pos.querySelector(`.puzzle-row :nth-child(${letterIndex})`);\r\n}\r\nfunction updateRow(rowIndex) {\r\n  row_pos = document.querySelector(\r\n    `.puzzle-container .puzzle-row:nth-child(${rowIndex})`\r\n  );\r\n}\r\nfunction updateLetter(letterIndex) {\r\n  letter_pos = row_pos.querySelector(`.puzzle-row :nth-child(${letterIndex})`);\r\n}\r\nfunction goNext() {\r\n  row_index += 1;\r\n  letter_index = 1;\r\n  updateBoth(row_index, letter_index);\r\n}\r\nfunction letterFeedback(pos, color) {\r\n  updateLetter(pos);\r\n  letter_pos.style.backgroundColor = `${color}`;\r\n  loadSpinner(false);\r\n}\r\nfunction makeReadOnly() {\r\n  for (let index = 0; index <= ANSWER_LENGTH; index++) {\r\n    updateLetter(index);\r\n    if (letter_pos) {\r\n      letter_pos.readOnly = true;\r\n    }\r\n    updateLetter(letter_index);\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"index.3d93717e.js.map","sourceRoot":"/__parcel_source_root/"}