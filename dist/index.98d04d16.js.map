{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const word_url = \"https://words.dev-apis.com/word-of-the-day?random=1\";\r\nconst check_url = \"https://words.dev-apis.com/validate-word\";\r\nlet letter_index = 1;\r\nlet row_index = 1;\r\nlet my_word = \"\";\r\nlet row_pos = document.querySelector(\r\n  `.puzzle-container .puzzle-row:nth-child(${row_index})`\r\n);\r\nlet letter_pos = row_pos.querySelector(\r\n  `.puzzle-row :nth-child(${letter_index})`\r\n);\r\nconst loader = document.querySelector(`.loader`);\r\nconst ANSWER_LENGTH = 5;\r\nlet message = document.querySelector(`.message`);\r\nlet sticky = false;\r\nlet lives = 6;\r\nlet done = false;\r\nlet wordApi;\r\nlet wordJson;\r\nlet secretWord;\r\n\r\nasync function init() {\r\n  wordApi = await fetch(word_url);\r\n  wordJson = await wordApi.json();\r\n  secretWord = wordJson.word;\r\n  //console.log(secretWord, wordJson.puzzleNumber);\r\n}\r\ninit();\r\nfunction insertLetter(event) {\r\n  if (done === false) {\r\n    if (isLetter(event.key) && letter_index <= 5 && sticky == false) {\r\n      letter_pos.innerHTML = event.key.toUpperCase();\r\n      letter_pos.style.color = \"black\";\r\n      letter_index += 1;\r\n      updateLetter(letter_index);\r\n      my_word += event.key.toUpperCase();\r\n    } else if (\r\n      event.key === \"Enter\" &&\r\n      letter_index == 6 &&\r\n      sticky == false &&\r\n      row_index < 7\r\n    ) {\r\n      sticky = true;\r\n      loadSpinner(true);\r\n      checkWord(my_word);\r\n    } else if (event.key === \"Backspace\" && letter_index > 1) {\r\n      my_word = my_word.slice(0, my_word.length - 1);\r\n      letter_index -= 1;\r\n      updateLetter(letter_index);\r\n      letter_pos.style.color = \"white\";\r\n    }\r\n  }\r\n}\r\n\r\nasync function checkWord(typedWord) {\r\n  typedWord = typedWord.toLowerCase();\r\n  const data = { word: typedWord };\r\n  //console.log(JSON.stringify(data));\r\n  const valid = await fetch(check_url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n  });\r\n  const processedResponse = await valid.json();\r\n  wordFeedback(processedResponse.validWord, typedWord);\r\n}\r\n\r\nfunction loadSpinner(status) {\r\n  if (status === true) {\r\n    loader.classList.remove(\"loader-hidden\");\r\n  } else {\r\n    loader.classList.add(\"loader-hidden\");\r\n  }\r\n}\r\n\r\nasync function wordFeedback(validation, typedWord) {\r\n  //console.log(secretWord, wordJson.puzzleNumber);\r\n  if (validation === false) {\r\n    changeBorder(false);\r\n  } else if (validation === true) {\r\n    if (typedWord === secretWord) {\r\n      message.innerHTML = \"You Win!\";\r\n      message.style.color = \"#00a648\";\r\n      done = true;\r\n    } else if (lives == row_index) {\r\n      message.style.color = \"red\";\r\n      message.innerHTML = `You Lose. The word was \"${secretWord}\"`;\r\n      done = true;\r\n    }\r\n    let letterDict = {};\r\n    for (let pos = 0; pos < ANSWER_LENGTH; pos++) {\r\n      const letter = typedWord[pos];\r\n      const guessLetter = secretWord[pos];\r\n\r\n      if (letterDict[guessLetter]) {\r\n        letterDict[guessLetter]++;\r\n        //console.log(letterDict);\r\n      } else {\r\n        letterDict[guessLetter] = 1;\r\n        //console.log(letterDict);\r\n      }\r\n      if (letter === guessLetter) {\r\n        letterFeedback(pos + 1, \"#00a648\");\r\n        letterDict[letter]--;\r\n      } else {\r\n        letterFeedback(pos + 1, \"#888888\");\r\n      }\r\n    }\r\n    for (let pos = 0; pos < ANSWER_LENGTH; pos++) {\r\n      const letter = typedWord[pos];\r\n      const guessLetter = secretWord[pos];\r\n      if (secretWord.includes(letter) && letterDict[letter]>0 && letter!==guessLetter) {\r\n          letterFeedback(pos + 1, \"#f7c652\");\r\n          letterDict[letter]--;\r\n      }\r\n    }\r\n    //console.log(letterDict);\r\n    goNext();\r\n    my_word = \"\";\r\n  }\r\n  sticky = false;\r\n}\r\n\r\nfunction changeBorder(validation) {\r\n  if (validation === false) {\r\n    my_word = \"\";\r\n    for (let i = 1; i < 6; i++) {\r\n      updateLetter(i);\r\n      letter_pos.style.borderColor = \"red\";\r\n    }\r\n    setTimeout(() => {\r\n      for (let i = 5; i >= 1; i--) {\r\n        updateLetter(i);\r\n        letter_pos.style.borderColor = \"lightgrey\";\r\n        letter_pos.style.color = \"white\";\r\n      }\r\n    }, 1000);\r\n    letter_index = 1;\r\n    updateLetter(letter_index);\r\n  }\r\n  loadSpinner(false);\r\n}\r\nfunction isLetter(letter) {\r\n  return /^[a-zA-Z]$/.test(letter);\r\n}\r\nfunction updateBoth(rowIndex, letterIndex) {\r\n  row_pos = document.querySelector(\r\n    `.puzzle-container .puzzle-row:nth-child(${rowIndex})`\r\n  );\r\n  letter_pos = row_pos.querySelector(`.puzzle-row :nth-child(${letterIndex})`);\r\n}\r\nfunction updateRow(rowIndex) {\r\n  row_pos = document.querySelector(\r\n    `.puzzle-container .puzzle-row:nth-child(${rowIndex})`\r\n  );\r\n}\r\nfunction updateLetter(letterIndex) {\r\n  letter_pos = row_pos.querySelector(`.puzzle-row :nth-child(${letterIndex})`);\r\n}\r\nfunction goNext() {\r\n  row_index += 1;\r\n  letter_index = 1;\r\n  updateBoth(row_index, letter_index);\r\n}\r\nfunction letterFeedback(pos, color) {\r\n  updateLetter(pos);\r\n  letter_pos.style.backgroundColor = `${color}`;\r\n  loadSpinner(false);\r\n}\r\n"],"names":["word_url","check_url","letter_index","row_index","my_word","row_pos","document","querySelector","letter_pos","loader","ANSWER_LENGTH","wordApi","wordJson","secretWord","message","sticky","lives","done","async","init","fetch","json","word","insertLetter","event","isLetter","key","innerHTML","toUpperCase","style","color","updateLetter","loadSpinner","checkWord","slice","length","typedWord","data","toLowerCase","valid","method","body","JSON","stringify","wordFeedback","validWord","status","classList","remove","add","validation","changeBorder","letterDict","pos","letter","guessLetter","letterFeedback","includes","goNext","i","borderColor","setTimeout","test","updateBoth","rowIndex","letterIndex","updateRow","backgroundColor"],"version":3,"file":"index.98d04d16.js.map"}